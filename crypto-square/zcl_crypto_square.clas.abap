CLASS zcl_crypto_square DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS ENCODE IMPORTING PLAIN_TEXT         TYPE STRING
                   RETURNING VALUE(CRYPTO_TEXT) TYPE STRING.
  PROTECTED SECTION.
  PRIVATE SECTION.
    TYPES: BEGIN OF RECTANGLE_VALUES,
             C        TYPE I,
             R        TYPE I,
             TEXT_LEN TYPE I,
           END OF RECTANGLE_VALUES.
    METHODS PREPARE IMPORTING PLAIN_TEXT             TYPE STRING
                    RETURNING VALUE(NORMALIZED_TEXT) TYPE STRING.
    METHODS DICTATING_RECTANGLE IMPORTING TEXT                    TYPE STRING
                                RETURNING VALUE(RECTANGLE_VALUES) TYPE RECTANGLE_VALUES.
ENDCLASS.



CLASS ZCL_CRYPTO_SQUARE IMPLEMENTATION.
  METHOD ENCODE.
    DATA(NORMALIZED_TEXT) = PREPARE( PLAIN_TEXT ).
    DATA(RECTANGLE_VALUES) = DICTATING_RECTANGLE( NORMALIZED_TEXT ).
    DATA(FIRST_OFFSET) = 0.
    DATA(SECOND_OFFSET) = 0.

    DO RECTANGLE_VALUES-C TIMES.
      FIRST_OFFSET = SY-INDEX - 1 .
      DO RECTANGLE_VALUES-R TIMES.
        SECOND_OFFSET = ( SY-INDEX - 1 ) * RECTANGLE_VALUES-C + FIRST_OFFSET.
        CRYPTO_TEXT = COND #( WHEN SECOND_OFFSET < RECTANGLE_VALUES-TEXT_LEN THEN |{ CRYPTO_TEXT }{ NORMALIZED_TEXT+SECOND_OFFSET(1) }| ELSE |{ CRYPTO_TEXT } | ).
      ENDDO.
      CRYPTO_TEXT = COND #( WHEN FIRST_OFFSET < RECTANGLE_VALUES-C - 1 THEN |{ CRYPTO_TEXT } | ELSE CRYPTO_TEXT ).
    ENDDO.
  ENDMETHOD.

  METHOD PREPARE.
    NORMALIZED_TEXT = PLAIN_TEXT.
    IF PLAIN_TEXT IS NOT INITIAL.
      NORMALIZED_TEXT =  TO_LOWER( NORMALIZED_TEXT ).
      NORMALIZED_TEXT = REPLACE( VAL = NORMALIZED_TEXT REGEX = `[':/.!&@$%^&]|[[:punct:]]|\\[a-zA-Z]{1}`  WITH = `` OCC = 0 ).
      CONDENSE NORMALIZED_TEXT NO-GAPS.
    ENDIF.
  ENDMETHOD.

  METHOD DICTATING_RECTANGLE.
    DATA(TEXT_LEN) = STRLEN( TEXT ).
    DATA(C) = 0.
    DATA(R) = 0.
    IF TEXT_LEN = 1.
      C = R = 1.
    ELSEIF TEXT_LEN > 1.
      R = FLOOR( SQRT( TEXT_LEN ) ).
      IF ( R ** 2 ) >= TEXT_LEN.
        C = R.
      ELSEIF ( R * ( R + 1 ) ) >= TEXT_LEN.
        C = R + 1.
      ELSEIF ( ( R + 1 ) ** 2 ) >= TEXT_LEN.
        C = R = R + 1.
      ENDIF.
    ENDIF.
    RECTANGLE_VALUES = VALUE RECTANGLE_VALUES( C = C 
                                               R = R 
                                               TEXT_LEN = TEXT_LEN ).
  ENDMETHOD.
ENDCLASS.